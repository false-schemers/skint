(import (srfi 4))
(include "test.scm")

(test-begin "srfi-4")

(test #t (u8vector? #u8()))
(test #t (u8vector? #u8(0 1 2)))
(test #f (u8vector? #()))
(test #f (u8vector? #(0 1 2)))
(test #f (u8vector? '()))
(test #t (u8vector? (make-u8vector 0)))
(test 0 (u8vector-length (make-u8vector 0)))
(test 1024 (u8vector-length (make-u8vector 1024)))
(test 1024 (u8vector-length (make-u8vector 1024 255)))
(test 3 (u8vector-length (u8vector 0 1 2)))
(test 0 (u8vector-ref (u8vector 0 1 2) 0))
(test 1 (u8vector-ref (u8vector 0 1 2) 1))
(test 2 (u8vector-ref (u8vector 0 1 2) 2))
(test #u8(0 255 2) (let ((bv (u8vector 0 1 2))) (u8vector-set! bv 1 255) bv))
(test '() (u8vector->list #u8()))
(test '(0 1 2) (u8vector->list #u8(0 1 2)))
(test '(0 1 2) (u8vector->list #u8(0 1 2) 0))
(test '(0 1 2) (u8vector->list #u8(0 1 2) 0 3))
(test '(1 2) (u8vector->list #u8(0 1 2) 1))
(test '(1) (u8vector->list #u8(0 1 2) 1 2))
(test '() (u8vector->list #u8(0 1 2) 2 2))
(test #u8() (list->u8vector '()))
(test #u8(24 42) (list->u8vector '(24 42)))

(test #t (s8vector? #s8()))
(test #t (s8vector? #s8(0 1 2)))
(test #f (s8vector? #()))
(test #f (s8vector? #(0 1 2)))
(test #f (s8vector? '()))
(test #t (s8vector? (make-s8vector 0)))
(test 0 (s8vector-length (make-s8vector 0)))
(test 1024 (s8vector-length (make-s8vector 1024)))
(test 1024 (s8vector-length (make-s8vector 1024 127)))
(test 3 (s8vector-length (s8vector 0 1 2)))
(test 0 (s8vector-ref (s8vector 0 1 2) 0))
(test 1 (s8vector-ref (s8vector 0 1 2) 1))
(test 2 (s8vector-ref (s8vector 0 1 2) 2))
(test #s8(0 -128 2) (let ((bv (s8vector 0 1 2))) (s8vector-set! bv 1 -128) bv))
(test '() (s8vector->list #s8()))
(test '(0 1 2) (s8vector->list #s8(0 1 2)))
(test '(0 1 2) (s8vector->list #s8(0 1 2) 0))
(test '(0 1 2) (s8vector->list #s8(0 1 2) 0 3))
(test '(1 2) (s8vector->list #s8(0 1 2) 1))
(test '(1) (s8vector->list #s8(0 1 2) 1 2))
(test '() (s8vector->list #s8(0 1 2) 2 2))
(test #s8() (list->s8vector '()))
(test #s8(24 42) (list->s8vector '(24 42)))

(test #t (u16vector? #u16()))
(test #t (u16vector? #u16(0 1 2)))
(test #f (u16vector? #()))
(test #f (u16vector? #(0 1 2)))
(test #f (u16vector? '()))
(test #t (u16vector? (make-u16vector 0)))
(test 0 (u16vector-length (make-u16vector 0)))
(test 1024 (u16vector-length (make-u16vector 1024)))
(test 1024 (u16vector-length (make-u16vector 1024 65535)))
(test 3 (u16vector-length (u16vector 0 1 2)))
(test 0 (u16vector-ref (u16vector 0 1 2) 0))
(test 1 (u16vector-ref (u16vector 0 1 2) 1))
(test 2 (u16vector-ref (u16vector 0 1 2) 2))
(test #u16(0 65535 2) (let ((bv (u16vector 0 1 2))) (u16vector-set! bv 1 65535) bv))
(test '() (u16vector->list #u16()))
(test '(0 1 2) (u16vector->list #u16(0 1 2)))
(test '(0 1 2) (u16vector->list #u16(0 1 2) 0))
(test '(0 1 2) (u16vector->list #u16(0 1 2) 0 3))
(test '(1 2) (u16vector->list #u16(0 1 2) 1))
(test '(1) (u16vector->list #u16(0 1 2) 1 2))
(test '() (u16vector->list #u16(0 1 2) 2 2))
(test #u16() (list->u16vector '()))
(test #u16(24 42) (list->u16vector '(24 42)))

(test #t (s16vector? #s16()))
(test #t (s16vector? #s16(0 1 2)))
(test #f (s16vector? #()))
(test #f (s16vector? #(0 1 2)))
(test #f (s16vector? '()))
(test #t (s16vector? (make-s16vector 0)))
(test 0 (s16vector-length (make-s16vector 0)))
(test 1024 (s16vector-length (make-s16vector 1024)))
(test 1024 (s16vector-length (make-s16vector 1024 -32768)))
(test 3 (s16vector-length (s16vector 0 1 2)))
(test 0 (s16vector-ref (s16vector 0 1 2) 0))
(test 1 (s16vector-ref (s16vector 0 1 2) 1))
(test 2 (s16vector-ref (s16vector 0 1 2) 2))
(test #s16(0 -32768 2) (let ((bv (s16vector 0 1 2))) (s16vector-set! bv 1 -32768) bv))
(test '() (s16vector->list #s16()))
(test '(0 1 2) (s16vector->list #s16(0 1 2)))
(test '(0 1 2) (s16vector->list #s16(0 1 2) 0))
(test '(0 1 2) (s16vector->list #s16(0 1 2) 0 3))
(test '(1 2) (s16vector->list #s16(0 1 2) 1))
(test '(1) (s16vector->list #s16(0 1 2) 1 2))
(test '() (s16vector->list #s16(0 1 2) 2 2))
(test #s16() (list->s16vector '()))
(test #s16(24 42) (list->s16vector '(24 42)))

(test #t (f32vector? #f32()))
(test #t (f32vector? #f32(0.0 1.0 2.0)))
(test #f (f32vector? #()))
(test #f (f32vector? #(-inf.0 +inf.0 +nan.0)))
(test #f (f32vector? '()))
(test #t (f32vector? (make-f32vector 0)))
(test 0 (f32vector-length (make-f32vector 0)))
(test 1024 (f32vector-length (make-f32vector 1024)))
(test 1024 (f32vector-length (make-f32vector 1024 +inf.0)))
(test 3 (f32vector-length (f32vector 0.0 1.0 2.0)))
(test 0.0 (f32vector-ref (f32vector 0.0 1.0 2.0) 0))
(test 1.0 (f32vector-ref (f32vector 0.0 1.0 2.0) 1))
(test 2.0 (f32vector-ref (f32vector 0.0 1.0 2.0) 2))
(test #f32(-0.0 +inf.0 -2.0) (let ((bv (f32vector -0.0 1.0 -2.0))) (f32vector-set! bv 1 +inf.0) bv))
(test '() (f32vector->list #f32()))
(test '(0.0 1.0 2.0) (f32vector->list #f32(0.0 1.0 2.0)))
(test '(0.0 1.0 2.0) (f32vector->list #f32(0.0 1.0 2.0) 0))
(test '(0.0 1.0 2.0) (f32vector->list #f32(0.0 1.0 2.0) 0 3))
(test '(1.0 2.0) (f32vector->list #f32(0.0 1.0 2.0) 1))
(test '(1.0) (f32vector->list #f32(0.0 1.0 2.0) 1 2))
(test '() (f32vector->list #f32(0.0 1.0 2.0) 2 2))
(test #f32() (list->f32vector '()))
(test #f32(24.0 42.0) (list->f32vector '(24.0 42.0)))
(test -inf.0 (f32vector-ref (f32vector -inf.0 +inf.0 +nan.0) 0))
(test +inf.0 (f32vector-ref (f32vector -inf.0 +inf.0 +nan.0) 1))
(test +nan.0 (f32vector-ref (f32vector -inf.0 +inf.0 +nan.0) 2))
(test 2.0 (f32vector-ref #f32(2.0000000009) 0))
(test +inf.0 (f32vector-ref #f32(1.79769313486231e308) 0))
(test -0.0 (f32vector-ref #f32(-2.225074e-308) 0))

(test #t (f64vector? #f64()))
(test #t (f64vector? #f64(0.0 1.0 2.0)))
(test #f (f64vector? #()))
(test #f (f64vector? #(-inf.0 +inf.0 +nan.0)))
(test #f (f64vector? '()))
(test #t (f64vector? (make-f64vector 0)))
(test 0 (f64vector-length (make-f64vector 0)))
(test 1024 (f64vector-length (make-f64vector 1024)))
(test 1024 (f64vector-length (make-f64vector 1024 +inf.0)))
(test 3 (f64vector-length (f64vector 0.0 1.0 2.0)))
(test 0.0 (f64vector-ref (f64vector 0.0 1.0 2.0) 0))
(test 1.0 (f64vector-ref (f64vector 0.0 1.0 2.0) 1))
(test 2.0 (f64vector-ref (f64vector 0.0 1.0 2.0) 2))
(test #f64(-0.0 +inf.0 -2.0) (let ((bv (f64vector -0.0 1.0 -2.0))) (f64vector-set! bv 1 +inf.0) bv))
(test '() (f64vector->list #f64()))
(test '(0.0 1.0 2.0) (f64vector->list #f64(0.0 1.0 2.0)))
(test '(0.0 1.0 2.0) (f64vector->list #f64(0.0 1.0 2.0) 0))
(test '(0.0 1.0 2.0) (f64vector->list #f64(0.0 1.0 2.0) 0 3))
(test '(1.0 2.0) (f64vector->list #f64(0.0 1.0 2.0) 1))
(test '(1.0) (f64vector->list #f64(0.0 1.0 2.0) 1 2))
(test '() (f64vector->list #f64(0.0 1.0 2.0) 2 2))
(test #f64() (list->f64vector '()))
(test #f64(24.0 42.0) (list->f64vector '(24.0 42.0)))
(test -inf.0 (f64vector-ref (f64vector -inf.0 +inf.0 +nan.0) 0))
(test +inf.0 (f64vector-ref (f64vector -inf.0 +inf.0 +nan.0) 1))
(test +nan.0 (f64vector-ref (f64vector -inf.0 +inf.0 +nan.0) 2))
(test 2.0000000009 (f64vector-ref #f64(2.0000000009) 0))
(test 1.79769313486231e308 (f64vector-ref #f64(1.79769313486231e308) 0))
(test -2.225074e-308 (f64vector-ref #f64(-2.225074e-308) 0))

(test-end)

